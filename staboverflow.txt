
---------------:::: StabOverflow ::::---------------

Questions:
	- comments
	- upvotes
	- ref to asker
	- time posted

Answers:
	- comments
	- upvotes
	- ref to answerer
	- time posted

Could the email auth just allow any valid email with the domain "students.stab.org" or "stab.org" ?

--------------- ((very) Tentative) Site Layout ---------------

Landing Page:
	- nav bar:
		- StabOverflow logo
		- search bar (whole site)
		- log in button
		- buttons for each class page (CSP, HDS ...) (or maybe a dropdown?)
		- button for Questions page ("Browse Questions")
	- table of recent questions (links), questions with most upvotes (option to toggle between these)
	- button to ask question (requires login)

Ask A Question Page:
	- title input
	- main question body input:
		- formatting -- need to be able to use bold, italics, underline, links, most importantly code 
			- (something like https://github.com/markdown-it/markdown-it ?)
			- https://github.com/google/code-prettify for syntax highlighting
			- Client Side markdown renderer: https://github.com/showdownjs/showdown

Class Page: (is this necessary?)
	- same nav bar
	- secondary search bar, which searches only under this class (formats a query and posts to search results page)
	- table of questions recently asked under that class

Individual Question Page: (clicking on an individual question)
	- same nav bar
	- show question title at very top
	- renders question markdown
	- show question data (asker, time asked, votes, class if applicable)
	- buttons for upvoting / downvoting / commenting
	- question comments posted under question
	- answers / answer comments posted below
	- option to delete question (this requires admin privileges)

Questions Page:
	- same nav bar
	- tabs: All, Unanswered, and one for each class
	- question links (maybe loaded in pages?)

Search Results Page:
	- same nav bar
	- query at top
	- table of question link results relevant to posted search

User Account Page:
	- show username, description, (photo?)
	- if admin, show options:
		- delete a class, add a class
		- add new trusted student emails (through uploading csv file or something)

--------------- User Stories ---------------

[User] --> not logged in, anyone can VIEW but not EDIT
[Student] --> logged in as student
[Admin] --> logged in as admin

1. [User] GETs / and sees landing page with recent questions.

2. [User] clicks "log in" button (direct to /login), authenticates with stab email, session starts, becomes either [student] or [admin]

3. [Student] clicks "Ask a Question" button, gets new question page, types question data (title, body (markdown), class), POSTs data to "/newQuestion"

4. [Student] clicks on a question link, which submits a GET with the question ID, page with all question data is rendered (question, question comments, answers, answer comments)

5. [Student] on indiv. question page clicks "Add Comment" on question/answer, text box appears, plaintext comment is POSTed along with question/answer ID to "/newQuestionComment" or "/newAnswerComment" respectively

7. [Student] clicks upvote (we're only doing upvoting) on question/answer, question/answer ID is POSTed to "/upvote"

8. [Student] types answer into answer box at bottom of indiv. question page, POSTs answer plaintext and corresponding question ID to "/newAnswer"

9. [User] types free text query into nav search bar, query POSTed to "/search", receives search results page with question links relevant to that query

10. [User] types query from search bar on search page, POSTed to "/search" and results rendered

11. Having searched ("/search"), [User] selects a filter from either of the two filter types:
	- Class filters: select a class to limit questions to (CSP, HDS ...)
	- Question type filter: "All", "Unanswered", ...

12. From landing page, [User] clicks "Browse Questions", this POSTs a blank query to "/search"

13. [User] GETs "/users/:id", user profile is rendered (username, name, bio, image, ...) with questions they've asked

14. [Admin] GETs their own profile, sees options to add / delete class categories (this needs work)

15. [Admin] clicks delete button on a question, comment, or answer, that ID along with its status ("question", "comment", ...) is POSTed to "/deleteQuestion", "/deleteComment", or "/deleteAnswer"

--------------- Database Schema ---------------

// questions and answers
TABLE posts
	uid
	question_uid
	type_uid
	creation_date
	title
	body
	owner_uid
	owner_username
	answer_count
	upvotes

TABLE comments
	uid
	parent_uid
	question_uid
	body
	creation_date
	owner_uid
	owner_username

// types are "Question" and "Answer"
TABLE post_types
	uid
	name

TABLE users
	uid
	username
	bio
	email
	isAdmin
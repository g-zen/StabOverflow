
------------------------------:::::::::::: StabOverflow ::::::::::::------------------------------


--------------- (Tentative) Site Layout ---------------

Landing Page:
	- nav bar:
		- StabOverflow logo
		- search bar (whole site)
		- log in button
		- button to "Browse Questions"
	- table of recent questions (links), questions with most upvotes (option to toggle between these maybe)
	- button to ask question (requires login)

Ask A Question Page:
	- title input
	- main question body input:
		- formatting -- need to be able to use bold, italics, underline, links, most importantly code 
			- (something like https://github.com/markdown-it/markdown-it ?)
			- https://github.com/google/code-prettify for syntax highlighting
			- Client Side markdown renderer: https://github.com/showdownjs/showdown
		- should have a live markdown preview
	- live markdown preview (clientside renderer)

Individual Question Page: (clicking on an individual question)
	- same nav bar
	- show question title at very top
	- render question markdown
	- show question data (asker, time asked, upvotes, tags, class if applicable)
	- buttons for upvoting / commenting
	- question comments posted under question
	- answers / answer comments posted below
	- option to delete question (this requires admin privileges, only visible if admin also)
	- at bottom, answer box to write an answer (with markdown preview)

Search Results Page:
	- same nav bar
	- secondary search bar at top, with query
	- category / question type filters on side
	- table of question link results relevant to posted search

User Account Page:
	- show username, description, (photo?)
	- if admin, show options:
		- delete a class, add a class

--------------- User Stories ---------------

[User] --> not logged in, anyone can VIEW but not PARTICIPATE
[Student] --> logged in as student (make posts, comments, edit profile)
[Admin] --> logged in as admin (delete posts, comments, add/delete categories)


---- [User] STORIES ----
1. [User] GETs / and sees landing page with recent questions.

2. Previous [User] clicks "log in" button (direct to /login), authenticates, session starts, becomes either [student] or [admin], directed to "/" on success ("/login" on fail)

3. [User] types free text query into nav search bar, query POSTed to "/search", receives search results page with question links relevant to that query

4. [User] types query into search bar on search page, POSTed to "/search" and results rendered

5. Having searched ("/search"), [User] selects a filter from either of the two filter types:
	- Category filters: select a class to limit questions to (CSP, HDS ...)
	- Question type filter: "All" or "Unanswered"
and submits the query again, now with filters (perhaps query is automatically resubmitted on filter change)

6. From landing page, [User] clicks "Browse Questions", this POSTs a blank query to "/search" and renders result

7. [User] GETs "/users/:id", a user profile is rendered (username, name, bio, image, ...) with (optional) questions they've asked

8. [User] logs in for first time, authenticates with "students.stab.org" (confirmation email), session starts, redirected to "/createProfile"

9. [User] sent to "/createProfile", types full name, username (ensure unique), and short description, POSTs to "/updateProfile"


---- [Student] STORIES ----

1. [Student] clicks "Ask a Question" button, gets new question page, types question data (title, body (markdown), class), POSTs data to "/newPost", specifying question

2. [Student] clicks on a question link, which GETs "/questions/:id", page with all question data is rendered (question, question comments, answers, answer comments, write an answer box at bottom)

3. [Student] on indiv. question page clicks "Add Comment" on question/answer, text box appears, plaintext comment (maybe markdown?) is POSTed with comment data to "/newComment"

4. [Student] clicks upvote (we're only doing upvoting) on question/answer, question/answer ID is POSTed to "/upvote"

5. [Student] types answer into answer box at bottom of indiv. question page, POSTs answer data and corresponding question ID to "/newPost" specifying it is an answer

6. Whilst signed in, [Student] gets their /users/:id page and clicks "Edit Profile", posts new data to "/updateProfile"


---- [Admin] STORIES ----
1. From their user profile, [Admin] POSTs the name of a new category to "/newCategory", or POSTs the uid of an existing category to "/deleteCategory"

2. [Admin] clicks (hidden) delete button on a question/answer/comment and after a confirmation, that ID along with its status (question/answer) is POSTed to "/deletePost" or "/deleteComment"

--------------- Database Schema ---------------

TABLE posts
	uid
	question_uid	// which question post does this post relate to
	type_uid		// question or answer
	category_uid	// which class (if any)
	creation_date	// when created
	owner_uid		// id of poster
	owner_username	// display name (for speed)
	answer_count	// so can check if unanswered
	upvotes			// for ordering
	title			// meat of the question
	body			// question body, markdown

TABLE comments
	uid
	parent_uid		// id of immediate parent (either question or answer)
	question_uid	// which question ultimately does this comment relate to
	body			// body of question (maybe markdown)
	creation_date	// when created
	owner_uid		// id of poster
	owner_username	// display name

TABLE tags
	uid
	tag				// what is the tag ("recursion", "nodejs", ...)
	post_uid		// which question was it tagged on 

TABLE post_types
	uid
	name			// is a post a "Question" or an "Answer"

TABLE categories
	uid
	name			// "CSP", "HDS", "HSE", ...

TABLE users
	uid
	full_name
	username
	bio
	email
	isAdmin

// used to verify first-logins??
TABLE pending_accounts
	uid
	code	// unique code sent in confirmation email
	email	// "students.stab.org" email that attempted to log in

--------------- Searching ---------------

	- search functionality can utilize the tags attached to a question to determine its relevance to free text queries
	- filters will be either be specified in the query or sent in the request
		- filter by categories by checking a post's category_uid
		- check if unanswered by accessing answer_count

--------------- Authentication ---------------

	- Valid emails: "students.stab.org" or "stab.org"
	- Use confirmation email to verify legitimate email
	- on login, if no user exists, have them enter data (full name, username, ...)

First login procedure:
	- if email is in fact "students.stab.org", email and a unique code are stored in pending_accounts table, send confirmation email to that address
	- confirmation email POSTs code and user's email to "/confirmation"
	- at the "/confirmation" endpoint, check if there exists a row with that same unique code and same email, 
	- if so, add new entry to users table, entering their email and setting isAdmin to false, redirect to 
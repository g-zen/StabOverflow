
------------------------------:::::::::::: StabOverflow ::::::::::::------------------------------


--------------- (Tentative) Site Layout ---------------

Landing Page:
	- nav bar:
		- StabOverflow logo
		- search bar (whole site)
		- log in button
		- button to "Browse Questions"
	- table of recent questions (links), questions with most upvotes (option to toggle between these maybe)
	- button to ask question (requires login)

Ask A Question Page:
	- title input
	- main question body input:
		- formatting -- need to be able to use bold, italics, underline, links, most importantly code 
			- (something like https://github.com/markdown-it/markdown-it ?)
			- https://github.com/google/code-prettify for syntax highlighting
			- Client Side markdown renderer: https://github.com/showdownjs/showdown
	- live markdown preview (clientside renderer)

Individual Question Page: (clicking on an individual question)
	- same nav bar
	- show question title at very top
	- render question markdown
	- show question data (asker, time asked, upvotes, tags, class if applicable)
	- buttons for upvoting / commenting
	- question comments posted under question
	- answers / answer comments posted below
	- option to delete question (this requires admin privileges, only visible if admin also)
	- at bottom, answer box to write an answer (with markdown preview)

Search Results Page:
	- same nav bar
	- secondary search bar at top, with query
	- category / question type filters on side
	- table of question link results relevant to posted search

User Account Page:
	- show username, description, (photo?)
	- if admin, show options:
		- delete a class, add a class

--------------- User Stories ---------------

[User] --> not logged in, anyone can VIEW but not PARTICIPATE
[Student] --> logged in as student (make posts, comments, edit profile)
[Admin] --> logged in as admin (delete posts, comments, add/delete categories)

1. [User] GETs / and sees landing page with recent questions.

2. [User] clicks "log in" button (direct to /login), authenticates with stab email, session starts, becomes either [student] or [admin]

3. [Student] clicks "Ask a Question" button, gets new question page, types question data (title, body (markdown), class), POSTs data to "/newPost", specifying question

4. [Student] clicks on a question link, which GETs "/questions/:id", page with all question data is rendered (question, question comments, answers, answer comments, write an answer box at bottom)

5. [Student] on indiv. question page clicks "Add Comment" on question/answer, text box appears, plaintext comment (maybe markdown?) is POSTed with comment data to "/newComment"

7. [Student] clicks upvote (we're only doing upvoting) on question/answer, question/answer ID is POSTed to "/upvote"

8. [Student] types answer into answer box at bottom of indiv. question page, POSTs answer data and corresponding question ID to "/newPost" specifying it is an answer

9. [User] types free text query into nav search bar, query POSTed to "/search", receives search results page with question links relevant to that query

10. [User] types query from search bar on search page, POSTed to "/search" and results rendered

11. Having searched ("/search"), [User] selects a filter from either of the two filter types:
	- Category filters: select a class to limit questions to (CSP, HDS ...)
	- Question type filter: "All", "Unanswered", ...

12. From landing page, [User] clicks "Browse Questions", this POSTs a blank query to "/search" and renders result

13. [User] GETs "/users/:id", a user profile is rendered (username, name, bio, image, ...) with questions they've asked

14. Whilst signed in, [Student] gets their /users/:id page and clicks "Edit Profile", posts new data to "/updateProfile"

15. From their user profile, [Admin] POSTs the name of a new category to "/newCategory", or POSTs the uid of an existing category to "/deleteCategory"

16. [Admin] clicks (hidden) delete button on a question/answer/comment and after a confirmation, that ID along with its status (question/answer) is POSTed to "/deletePost" or "/deleteComment"

--------------- Database Schema ---------------

// questions and answers
TABLE posts
	uid
	question_uid
	type_uid
	category_uid
	creation_date
	owner_uid
	owner_username
	answer_count
	upvotes
	title
	body

TABLE comments
	uid
	parent_uid
	question_uid
	body
	creation_date
	owner_uid
	owner_username

TABLE tags
	uid
	tag
	post_uid

// types are "Question" and "Answer"
TABLE post_types
	uid
	name

// CSP, HSE, HDS ...
TABLE categories
	uid
	name

TABLE users
	uid
	full_name
	username
	bio
	email
	isAdmin

--------------- Searching ---------------

	- search functionality can utilize the tags attached to a question to determine its relevance to free text queries

--------------- Authentication ---------------

	- Valid emails: "students.stab.org" or "stab.org"
	- Use confirmation email to verify legitimate email
	- on login, if no user exists, have them enter data (full name, username, ...)

------------------------------:::::::::::: StabOverflow ::::::::::::------------------------------


--------------- (Tentative) Site Layout ---------------

Landing Page:
	- nav bar:
		- StabOverflow logo
		- search bar (whole site)
		- "Log In" button --> "/login" (only if not logged in)
		- "Sign Up" button --> "/signup" (only if not logged in)
		- "Log Out" button --> "/logout" (only if logged in)
		- "My Profile" button --> "/users/:id" (only if logged in)
		- button to "Browse Questions"
	- table of recent questions (links), questions with most upvotes (option to toggle between these maybe)
	- button to ask question (requires login)

Ask A Question Page:
	- title input
	- main question body input:
		- formatting -- need to be able to use bold, italics, underline, links, most importantly code 
			- (something like https://github.com/markdown-it/markdown-it ?)
			- https://github.com/google/code-prettify for syntax highlighting
			- Client Side markdown renderer: https://github.com/showdownjs/showdown
				- Here's another possibly better one: https://github.com/benweet/stackedit
				- maybe should use PageDown (what stackoverflow uses)
					- https://code.google.com/archive/p/pagedown/wikis/PageDown.wiki
		- should have a live markdown preview
	- live markdown preview (clientside renderer)

Individual Question Page: (clicking on an individual question)
	- same nav bar
	- show question title at very top
	- render question markdown
	- show question data (asker, time asked, upvotes, tags, class if applicable)
	- buttons for upvoting / commenting
	- question comments posted under question
	- answers / answer comments posted below
	- option to delete question (this requires admin privileges, only visible if admin also)
	- at bottom, answer box to write an answer (with markdown preview) (only render if logged in)

Search Results Page:
	- same nav bar
	- secondary search bar at top, with query
	- category / question type filters on side
	- table of question link results relevant to posted search

User Account Page:
	- show username, description, (photo?)
	- if admin, show options:
		- delete a class, add a class

--------------- User Stories ---------------

[Visitor] --> not logged in, anyone can VIEW but not PARTICIPATE
[Student] --> logged in as student (make posts, comments, edit profile)
[Admin] --> logged in as admin (delete posts, comments, add/delete categories)

---- [Visitor] STORIES ----

1. [Visitor] GETs / and sees landing page with recent questions.

2. [Visitor] (in the system) clicks "log in" button (direct to /login), authenticates, session starts, becomes either [Student] or [Admin], directed to "/" on success ("/login" on fail)

3. [Visitor] types free text query into nav search bar, query POSTed to "/search", receives search results page with question links relevant to that query

4. [Visitor] types query into search bar on search page, POSTed to "/search" and results rendered

5. Having searched ("/search"), [Visitor] selects a filter from either of the two filter types:
	- Category filters: select a class to limit questions to (CSP, HDS ...)
	- Question type filter: "All" or "Unanswered"
and submits the query again, now with filters (perhaps query is automatically resubmitted on filter change)

6. From landing page, [Visitor] clicks "Browse Questions", this POSTs a blank query to "/search" and renders result

7. [Visitor] GETs "/users/:id", a user profile is rendered (username, name, bio, image, ...) with (optional) questions they've asked

8. [Visitor] GETs "/signup" and is added to system, provided they have a "students.stab.org" email

9. [Visitor] clicks on a question link, which GETs "/questions/:id", page with all question data is rendered (question, question comments, answers, answer comments) (answer box only rendered if logged in)


---- [Student] STORIES ----

1. [Student] clicks "Ask a Question" button, gets new question page, types question data (title, body (markdown), class), POSTs data to "/newPost", specifying question

2. [Student] on indiv. question page clicks "Add Comment" on question/answer, text box appears, plaintext comment (maybe markdown?) is POSTed with comment data to "/newComment"

3. [Student] clicks upvote (we're only doing upvoting) on question/answer, question/answer ID is POSTed to "/upvote"

4. [Student] types answer into answer box at bottom of indiv. question page, POSTs answer data and corresponding question ID to "/newPost" specifying it is an answer

5. Whilst signed in, [Student] gets their "/users/:id" page and clicks "Edit Profile", posts new data to "/updateProfile"


---- [Admin] STORIES ----

1. From their user profile, [Admin] POSTs the name of a new category to "/newCategory", or POSTs the uid of an existing category to "/deleteCategory"

2. [Admin] clicks (hidden) delete button on a question/answer/comment and after a confirmation, that ID along with its status (question/answer) is POSTed to "/deletePost" or "/deleteComment"

3. [Admin] POSTs an email address and full name to "/addAccount", which is added into users table if not already existing (now that person can just log in, they don't require sign up)

4. [Admin] POSTs an email address to "/makeAdmin", that account is given admin privileges. If does not exist, error page is rendered

5. [Admin] POSTs an email address to "/removeAdmin", that account is un-admined, even if was already not admin. If does not exist, error page rendered.


-- Summary of Privileges --

[Visitors] can:
	- see landing page
	- search our question database
	- view a question and all of its comments/answers
	- view user profiles

[Students] can:
	- do everything [Visitors] can
	- ask questions
	- answer questions
	- make comments
	- upvote questions and answers
	- edit THEIR OWN user profile info (full name and bio)

[Admins] can:
	- do everything [Students] can
	- add new categories
	- delete existing categories
	- delete questions, answers, and comments
	- manually add users (enter an email / name)
	- change the isAdmin privilege of any user

--------------- Database Schema ---------------

TABLE posts
	uid
	question_uid	// which question post does this post relate to
	type_uid		// question or answer
	category_uid	// which class (if any)
	creation_date	// when created
	owner_uid		// id of poster
	owner_name		// display name (for speed)
	answer_count	// so can check if unanswered
	upvotes			// for ordering
	title			// meat of the question
	body			// question body, markdown

TABLE comments
	uid
	parent_uid		// id of immediate parent (either question or answer)
	question_uid	// which question ultimately does this comment relate to
	body			// body of question (maybe markdown)
	creation_date	// when created
	owner_uid		// id of poster
	owner_name		// display name

TABLE tags
	uid
	tag				// what is the tag ("recursion", "nodejs", ...)
	post_uid		// which question was it tagged on 

TABLE post_types
	uid
	name			// is a post a "Question" or an "Answer"

TABLE categories
	uid
	name			// "CSP", "HDS", "HSE", ...

TABLE users
	uid
	full_name
	bio
	email
	isAdmin

// used to verify first-logins (maybe not)
TABLE pending_accounts
	uid
	code	// unique code sent in confirmation email
	email	// "students.stab.org" email that attempted to log in

--------------- Searching ---------------

	- search functionality can utilize the tags attached to a question to determine its relevance to free text queries
	- filters will be either be specified in the query or sent in the request
		- filter by categories by checking a post's category_uid
		- check if unanswered by accessing answer_count

--------------- Authentication ---------------

	- Valid emails: "students.stab.org" or "stab.org"

Sign up procedure:
	CONFIRMATION EMAIL IDEA:
		- if email is a (previously unseen) "students.stab.org" account, email and a unique code are stored in pending_accounts table, send confirmation email to that address
		- confirmation email POSTs code and user's email to "/confirmation"
		- at the "/confirmation" endpoint, check if there exists a row with that same unique code and same email, 
		- if so, delete that entry in pending_accounts, add new entry to users table, entering their email and setting isAdmin to false, redirect to "/login"

	MUCH SIMPLER IDEA:
		- when "/signup" is gotted, we ask them to authenticate with "some" google email, which, once it has been proved real, we check to see if it is "students.stab.org", and if so, we enter them into the users table
			- maybe they entered their full name earlier so we can just add that into their user entry
				- actually could we pull full name from Google?

Log in procedure:
	- URL that user was at before logging in is POSTed to "/login", where they then authenticate and are redirected back to that URL
		- this way, if someone is logged out and attempts to do something beyond their privileges, we have them POST to login, so once they are auth'd they come right back to the page they were on